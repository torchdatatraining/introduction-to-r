---
title: "Introduction to R"
format: html
editor: visual
---

## Overview

This is a Quarto document - you may see people refer to this as a notebook. This type of file allows you to weave text, code, tables, and charts together. 

You can output a variety of file types including html and pdf for sharing with others. It has the file extension `.qmd`. This contrasts to the `.R` script file we saw previously which only contains code.

To style the document we can use markdown, a lightweight markup language designed for quick, easy formatting. You can find more about markdown [here](https://quarto.org/docs/authoring/markdown-basics.html).

The rest of this course will use this notebook.

## Libraries

We previously installed three packages: readr, dplyr and ggplot2. 

But what do they do?

-   readr is a package for reading data into R
-   dplyr is a package for manipulating data
-   ggplot2 is a fantastic plotting library

To load these libraries we use the library function. You will see some strange message below. This is telling us that dplyr has some functions which have the exact same name as some functions which were already present in R. Don't worry too much about this at the moment.

```{r}
library(readr)
library(dplyr)
library(ggplot2)
```

## Reading data with readr

A key part of analysis is obtaining data.

Inside the data folder I have placed two data files `gdp.csv` and `population.csv`

If you aren't familar with them, comma separated value (or CSV for short) files are one the most common data file types around. They are tabular, organised into rows and columns. Each entry is separated by a comma. You can open them in all sorts of programs including a text editor like notepad on windows or spreadsheet software like Excel.

And we can use them in R.

Our first mission is to figure out the full names of these files. Using the file explorer in R or on your machine, navigate to the `gdp.csv` and `population.csv` files. These are inside the `data` folder.

A note on file names, particularly for Windows users. In R the backslash `\` is a special character. If you have one in your file name, replace it with a forward slash `/`. It shouldn't be a problem for this example but it will help you out in the future.

```{r}
filename_gdp <- "/Users/neilcurrie/introduction-to-r-main/data/gdp.csv"
filename_population <- "/Users/neilcurrie/introduction-to-r-main/data/population.cv"
```

A good check to do is to see if the file you have created exists.

```{r}
file.exists(filename_gdp)
file.exists(filename_population)
```

Let's fix that one.

```{r}
filename_population <- "/Users/neilcurrie/introduction-to-r-main/data/population.csv"
file.exists(filename_population)
```

Now we can read it the data files

```{r}
gdp_raw <- read_csv(filename_gdp)
```

Let's try some of those functions that the output suggests. First the `spec` function.

```{r}
spec(gdp_raw)
```

Now we can try using the same function with `show_col_types = FALSE`.

```{r}
gdp_raw <- read_csv(filename_gdp, show_col_types = FALSE)
```

We can use the viewer or the print function.

```{r}
print(gdp_raw)
```

The summary function can be useful to build up a more informed picture of a data frame.

```{r}
summary(gdp_raw)
```

To turn off scientific notation set `scipen = 999` in the `options` function. To
reset this behavior use `scipen = 0` and re-run.

```{r}
options(scipen = 999)
summary(gdp_raw)
```


Let's read in the population data now, inspect the object in the viewer and use the summary function to obtain some more information.

```{r}
population_raw <- read_csv(filename_population)
summary(population_raw)
```

## Manipulating data with dplyr

Our ultimate objective will be to produce a line chart which shows GDP per head
from 1980 to 2020. Before we get to that point we will need to manipulate the 
data into the correct format using functions from the `dplyr` package.

```{r}
gdp_edited <- mutate(gdp_raw, year = substr(quarter, 1, 4))
gdp_edited <- filter(gdp_edited, year <= 2020) # wont work
gdp_edited <- mutate(gdp_edited, year = as.numeric(year))
gdp_edited <- filter(gdp_edited, year <= 2020)
```

But there is a better way to write that out using the pipe `|>`.

```{r}
gdp_edited <- gdp_raw |> 
  mutate(year = substr(quarter, 1, 4), year = as.numeric(year)) |> 
  filter(year <= 2020) 
```

Next up we will use the `group_by` and `summarise` functions to sum the data from quarterly to annual.

```{r}
gdp_edited <- gdp_raw |> 
  mutate(year = substr(quarter, 1, 4), year = as.numeric(year)) |> 
  filter(year <= 2020) |> 
  group_by(year) |> 
  summarise(annual_gdp = sum(gdp))
```

The population dataset is not ordered by the `year` column so we will sort that and then bind together with the gdp dataset.

```{r}
population_edited <- population_raw |> 
  arrange(year) |> 
  select(population)

combined <- bind_cols(gdp_edited, population_edited) |> 
  mutate(gdp_per_head = annual_gdp / population)
```

## Plotting data with ggplot2

```{r}
qplot(x = year, y = gdp_per_head, data = combined)

qplot(x = year, y = gdp_per_head, data = combined, geom = "line", 
      main = "GDP per head in the UK", xlab = "Year", ylab = "GDP per head")
```

## Output

How to save those charts outside of R?

```{r}
filename_line_plot <- "/Users/neilcurrie/introduction-to-r-main/output/gdp_per_head_line.png"
  
ggsave(filename_line_plot)

point_plot <- qplot(x = year, y = gdp_per_head, data = combined)

filename_point_plot <- "/Users/neilcurrie/introduction-to-r-main/output/gdp_per_head_point.png"

ggsave(filename_point_plot, plot = point_plot)
```

Saving the data outside of R.

```{r}
filename_combined <- "/Users/neilcurrie/introduction-to-r-main/output/combined.csv"

write_csv(combined, file = filename_combined)
```

Finally, use the Render button to create a final, dynamic notebook you could share with someone. In this case it is HTML format so you can open it in any web browser. Other formats, like PDF, are possible too.


